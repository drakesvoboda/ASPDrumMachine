"use strict";

"use-strict";

var app = angular.module("AngularDrumMachine", []);

app.run([ "drumMachine", "$q", "$rootScope", "$timeout", function(drumMachine, $q, $rootScope, $timeout) {
    $rootScope.loading = !0, drumMachine.loadMachine(0), drumMachine.loadInstruments().then(function(result) {
        drumMachine.loadSequence().then(function(result) {
            $rootScope.machine = drumMachine, $rootScope.tempo = drumMachine.tempo.call(this), 
            $rootScope.loading = !1;
        });
    });
} ]), app.controller("DrumMachineCtrl", function($scope) {
    $scope.lock = !1, $scope.playLoop = function() {
        $scope.lock || ($scope.machine.play(), $scope.fade_msg_play = !0, console.log("Playing"), 
        $scope.lock = !0);
    }, $scope.stopLoop = function() {
        $scope.lock = !1, $scope.machine.stop();
    }, $scope.resetLoop = function() {
        $scope.machine.reset();
    }, $scope.updateTempo = function() {
        $scope.machine.setTempo($scope.tempo);
    }, $scope.addNewRow = function(_newRow) {
        console.log(_newRow), $scope.machine.addNewRow(_newRow);
    }, $scope.EditBPM = function() {
        var bpmEdit = document.getElementById("bpmEdit");
        document.getElementById("bpm").style.display = "none", bpmEdit.style.display = "inline-block";
    }, $scope.CloseEdit = function() {
        bpm.style.display = "inline-block", bpmEdit.style.display = "none";
    };
}), app.directive("fileread", [ function() {
    return {
        scope: {
            fileread: "="
        },
        link: function(scope, element, attributes) {
            element.bind("change", function(changeEvent) {
                var reader = new FileReader();
                reader.onload = function(loadEvent) {
                    scope.$apply(function() {
                        scope.fileread = loadEvent.target.result;
                    });
                }, reader.readAsDataURL(changeEvent.target.files[0]);
            });
        }
    };
} ]), app.filter("range", function() {
    return function(input, total) {
        total = parseInt(total);
        for (var i = 0; i < total; i++) input.push(i);
        return input;
    };
}), app.factory("drumMachine", function($http, $q, timerQueue) {
    function setTempo(newTempo) {
        _tempo = newTempo, _delay = beatDelay();
    }
    function stop() {
        _playing = !1, _timers.clear();
    }
    function reset() {
        stop(), _currentBeat = 0, resetAllRows();
    }
    function playBeat() {
        return function() {
            _currentBeat >= _gridLength && (_currentBeat = 0);
            for (var i = 0; i < _rows.length; i++) _rows[i].playSound(_currentBeat);
            _currentBeat += 1, _timers.add(playBeat(), _delay);
        };
    }
    function resetAllRows() {
        for (var i = 0; i < _rows.length; i++) _rows[i].reset();
    }
    function beatDelay() {
        return 1e3 / (2 * _tempo) * 60;
    }
    var _playing = !1, _currentBeat = 0, _delay = 100, _gridLength = 16, _tempo = 120, _timers = timerQueue, _rows = [];
    return {
        loadMachine: function(machineID) {
            return $http.post("/Ajax/Machine", {
                machineID: machineID
            }).then(function(response) {
                return console.log(response), "Machine Loaded";
            });
        },
        loadInstruments: function(instrumentFile) {
            var item, player, instrument, file = instrumentFile || "/public/app/services/data/instruments/kit-1.json";
            return $http.get(file).then(function(response) {
                for (var i = 0; i < 4; i++) item = response.data.instruments[i], player = new Howl({
                    urls: [ "/public/assets/audio/" + item.file ]
                }), instrument = new Instrument(player, item), _rows.push(new Row(instrument, _gridLength));
                return "Instruments Loaded";
            });
        },
        loadSequence: function(sequenceFile) {
            var file = sequenceFile || "/public/app/services/data/sequences/seq-1.json";
            return reset(), $http.get(file).then(function(response) {
                _gridLength = response.data.gridLength, setTempo(response.data.tempo);
                for (var i = 0; i < 4; i++) for (var j = 0; j < _gridLength; j++) "1" === response.data.rows[i][j] ? _rows[i].getBeats()[j].activate() : _rows[i].getBeats()[j].deactivate();
                return "Sequence Loaded";
            });
        },
        gridLength: function() {
            return _gridLength;
        },
        currentBeat: function() {
            return _currentBeat;
        },
        rows: function() {
            return _rows;
        },
        tempo: function() {
            return _tempo;
        },
        setTempo: setTempo,
        play: function() {
            _playing = !0, _timers.add(playBeat(), beatDelay());
        },
        stop: stop,
        reset: reset,
        addNewRow: function(_newRow) {
            console.log(_newRow);
            var player = new Howl({
                urls: [ _newRow.file ]
            }), instrument = new Instrument(player, {
                name: _newRow.name
            });
            _rows.push(new Row(instrument, _gridLength));
        }
    };
});

var Beat = function() {
    var active = !1;
    return {
        isActive: function() {
            return active;
        },
        activate: function() {
            active = !0;
        },
        deactivate: function() {
            active = !1;
        },
        toggle: function() {
            active = !active;
        }
    };
}, Instrument = function(player, inst) {
    var audioPlayer = player, name = inst.name, description = inst.description;
    return {
        getName: function() {
            return name;
        },
        getDescription: function() {
            return description;
        },
        play: function() {
            try {
                return audioPlayer.play(), !0;
            } catch (e) {
                return console.log("Unable to play sound", e), !1;
            }
        }
    };
}, Row = function(instrument, initialBeats) {
    function addBeats(num) {
        for (var i = 0; i < num; i++) beats.push(new Beat());
    }
    var instrument = instrument, beats = [];
    return addBeats(initialBeats), {
        getInstrument: function() {
            return instrument;
        },
        getBeats: function() {
            return beats;
        },
        addBeats: addBeats,
        reset: function() {
            for (var i = 0; i < beats.length; i++) beats[i].deactivate();
        },
        playSound: function(index) {
            return !!beats[index].isActive() && instrument.play();
        }
    };
};

app.factory("timerQueue", function($timeout) {
    var _queue = new Array();
    return {
        queue: function() {
            return _queue;
        },
        add: function(fn, delay) {
            _queue.push($timeout(fn, delay));
        },
        clear: function() {
            for (var i = 0; i < _queue.length; i++) $timeout.cancel(_queue[i]);
            _queue = [];
        }
    };
});